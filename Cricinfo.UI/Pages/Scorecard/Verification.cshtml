@page
@model VerificationModel
@using Cricinfo.Models
@{
    var match = (Match)ViewData["match"];
}
@{
    <h1 class="text-center font-weight-normal">Please review the scorecard before submitting</h1>

    <h2 class="text-center font-weight-light">Match Details</h2>

    <div class="row justify-content-around">
        <div class="col-4">
            <table class="table table-sm table-borderless row justify-content-center">
                <tr><td class="text-secondary font-weight-bold">Venue</td><td class="text-info text-right">@match.Venue</td></tr>
                <tr><td class="text-secondary font-weight-bold">Date</td><td class="text-info text-right">@match.DateOfFirstDay.ToLongDateString()</td></tr>
                <tr><td class="text-secondary font-weight-bold">Home Team</td><td class="text-info text-right">@match.HomeTeam</td></tr>
                <tr><td class="text-secondary font-weight-bold">Away Team</td><td class="text-info text-right">@match.AwayTeam</td></tr>
                <tr><td class="text-secondary font-weight-bold">Result</td><td class="text-info text-right">@Match.ConvertResult(match.Result)</td></tr>
            </table>
        </div>

        <div class="col-3">
            <table class="table table-sm table-borderless table-hover text-center text-info font-weight-light">
                <thead class="text-secondary">
                    <tr><th>Home Squad</th></tr>
                </thead>
                @foreach (var player in match.HomeSquad)
                {
                    <tr><td>@player</td></tr>
                }
            </table>
        </div>

        <div class="col-3">
            <table class="table table-sm table-borderless table-hover text-center text-info font-weight-light">
                <thead class="text-secondary">
                    <tr><th>Away Squad</th></tr>
                </thead>
                @foreach (var player in match.AwaySquad)
                {
                    <tr><td>@player</td></tr>
                }
            </table>
        </div>
    </div>

    <div>
        @for (int i = 0; i < match.Scores.Length; i++)
        {
            var innings = match.Scores[i];
            var label = innings.Innings == 1 ? "First" : "Second";
            ViewData["ScorecardTitle"] = $"{label} Innings - {innings.Team}";
            ViewData["innings-scorecard-id"] = $"innings-scorecard-{i}";
            <partial name="_Scorecard" model="innings" />
        }
    </div>

    <div class="btn-toolbar justify-content-center">
        <div class="btn-group">
            <button class="btn btn-info btn-sm" id="previous-innings-btn" disabled>Previous Innings</button>
            <button class="btn btn-info btn-sm" id="next-innings-btn">Next Innings</button>
        </div>
    </div>

    <br />

    <form method="post">
        <div class="row justify-content-center">
            <button class="btn btn-info btn-sm">Submit Scorecard</button>
        </div>
    </form>
}

@section Scripts {
    <script>
        (function() {
            document.getElementById("innings-scorecard-0").classList.add("show");

            const IDs = [...document.querySelectorAll(".innings-scorecard")].map(e => e.id);
            const MAX_ID = IDs.length - 1;

            const setScorecardButtonStatus = function (cur_idx, nxt_idx) {
                if (cur_idx === 0 && nxt_idx === 1 || cur_idx === 1 && nxt_idx === 0) {
                    document.getElementById("previous-innings-btn").toggleAttribute("disabled");
                }
                if (cur_idx === MAX_ID && nxt_idx === MAX_ID - 1 || cur_idx === MAX_ID - 1 && nxt_idx === MAX_ID) {
                    document.getElementById("next-innings-btn").toggleAttribute("disabled");
                }
            };

            const updateScorecard = function (getNextId) {
                const currentScorecardId = document.querySelectorAll(".innings-scorecard.show")[0].id;
                const currentScorecardIndex = IDs.indexOf(currentScorecardId);
                const nextScorecardIndex = getNextId(currentScorecardIndex) % IDs.length
                const nextScorecardId = `innings-scorecard-${nextScorecardIndex}`;
                document.getElementById(`${currentScorecardId}`).classList.toggle("show");
                document.getElementById(`${nextScorecardId}`).classList.toggle("show");
                setScorecardButtonStatus(currentScorecardIndex, nextScorecardIndex);
            };

            document.getElementById("previous-innings-btn").addEventListener("click",
                () => updateScorecard(idx => idx - 1));
            document.getElementById("next-innings-btn").addEventListener("click",
                () => updateScorecard(idx => idx + 1));
        })();
    </script>
}
